<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.studysiba.mapper.BoardMapper">

	<insert id="write">
		<selectKey keyProperty="no" order="BEFORE" resultType="long">
			select coalesce(max(no+1),1) as no from board
		</selectKey>
		insert into board
		values(#{no}, #{type}, #{id}, #{title}, #{content}, #{no}, #{step}, #{indent}, #{count}, #{available}, now() )
	</insert>
	
	<select id="view" resultType="com.studysiba.domain.board.FreeBoardVO">
		select no, type, id, title, content, gNo, step, indent, count, available, DATE_FORMAT(bDate, '%Y.%m.%d %H:%i') as bDate from board
		where type = 'freeboard' AND no = #{no}
	</select>
	
	<update id="replyShape">
		update board set step = step+1 where type=#{type} AND gNo = #{gNo} AND step > #{step}
	</update>
	
	<insert id="reWrite">
		<selectKey keyProperty="no" order="BEFORE" resultType="long">
			select coalesce(max(no+1),1) as no from board
		</selectKey>
		insert into board
		values(#{no}, #{type}, #{id}, #{title}, #{content}, #{gNo}, #{step}+1, #{indent}+1, #{count}, #{available}, now() )
	</insert>
	
	<select id="getBoardCount" resultType="int">
		select count(*) from board
		where type='freeboard'
	</select>
	
	<select id="getBoardList" resultType="com.studysiba.domain.board.FreeBoardVO">
		select no, type, id, title, content, gNo, step, indent, count, available, 
		DATE_FORMAT(bDate, '%Y년%m월%d일 %H시%i분') as bDate, likes.likecount as likeCount, comment.commentcount as commentCount from board
		left join (select fNo, coalesce(count(*),0) as likecount from likes group by fNo ) likes
		on board.no = likes.fNo 
		left join (select fNo, coalesce(count(*),0) as commentcount from comment group by fNo ) comment
		on board.no = comment.fNo
		order by gNo desc, step asc limit #{startRow},#{pageSize}
	</select>
	
	<update id="increaseCount">
		update board set count = count+1 where no = #{no}
	</update>
	
	<insert id="addLike">
		<selectKey keyProperty="no" order="BEFORE" resultType="long">
			select coalesce(max(no+1),1) as no from likes
		</selectKey>
		insert into likes(no, fNo, type, id, lDate)
		values( #{no}, #{fNo}, #{type}, #{id}, now() )
	</insert>
	
	<delete id="deleteLike">
		delete from likes where id = #{id} AND #{fNo}
	</delete>
	
	<select id="getLike" resultType="String">
		select count(*) from likes where fNo = #{no}
	</select>
	
	<select id="getLikeId" resultType="String">
		select id from likes where fNo=#{fNo} and id = #{id}
	</select>
	
	<insert id="writeComment">
		<selectKey keyProperty="no" order="BEFORE" resultType="long">
			select coalesce(max(no+1),1) as no from comment
		</selectKey>
		insert into comment(no, fNo, type, id, preId, content, gNo, step, indent, available, cDate)
		values( #{no}, #{fNo}, #{type}, #{id}, #{preId}, #{content}, #{no}, #{step}, #{indent}, #{available}, now() )
	</insert>
	
	<select id="getCommentList" resultType="com.studysiba.domain.board.CommentVO">
		select comment.no, comment.fNo, comment.type, comment.id, premember.nick as preId, comment.content, comment.gNo, comment.step, 
		comment.indent, comment.available, DATE_FORMAT(comment.cDate,'%Y.%m.%d %H:%i') as cDate, member.nick, member.proFile  from 
		( select * from comment where fNo = #{no} order by gNo ASC, step ASC ) comment
		left join 
		( select id, nick, proFile from member ) member
		on comment.id = member.id
		left join
		( select id, nick from member ) premember
		on comment.preId = premember.id
		order by comment.gNo ASC, comment.step ASC
	</select> 
	
	<update id="commentShape">
		update comment set step = step+1 where type=#{type} AND gNo = #{gNo} AND step > #{step}
	</update>
	
	<insert id="reWriteComment">
		<selectKey keyProperty="no" order="BEFORE" resultType="long">
			select coalesce(max(no+1),1) as no from comment
		</selectKey>
		insert into comment(no, fNo, type, id, preId, content, gNo, step, indent, available, cDate)
		values( #{no}, #{fNo}, #{type}, #{id}, #{preId}, #{content}, #{gNo}, #{step}+1, #{indent}+1, #{available}, now() )
	</insert>

	<select id="getCommentCount" resultType="int">
		select count(*) from comment
		where fNo = #{no}
	</select>

	<update id="modify">
		update board 
		set title=#{title}, content=#{content} 
		where id=#{id} AND no=#{no}
	</update>
	
	<update id="delete">
		update board 
		set available=1 where id=#{id} AND no=#{no}
	</update>
	
	<select id="getSearchCount" resultType="int">
		select count(*) from board
		where type='freeboard'
		<choose>
			<when test="searchType != null and searchType.equals('title')">
				AND title like CONCAT('%', #{searchText}, '%')
			</when>
			<when test="searchType != null and searchType.equals('content')">
				AND content like CONCAT('%', #{searchText}, '%')
			</when>
			<when test="searchType != null and searchType.equals('id')">
				AND id = #{searchText}
			</when>
			<when test="searchType != null and searchType.equals('all')">
				AND ( ( title like CONCAT('%', #{searchText}, '%') )
				OR ( content like CONCAT('%', #{searchText}, '%') )
				OR ( id = #{searchText} ) )
			</when>
		</choose>
	</select>
	
	<select id="getSearchList" resultType="com.studysiba.domain.board.FreeBoardVO">
		select no, type, id, title, content, gNo, step, indent, count, available, 
		DATE_FORMAT(bDate, '%Y년%m월%d일 %H시%i분') as bDate, likes.likecount as likeCount, comment.commentcount as commentCount from board
		left join (select fNo, coalesce(count(*),0) as likecount from likes group by fNo ) likes
		on board.no = likes.fNo 
		left join (select fNo, coalesce(count(*),0) as commentcount from comment group by fNo ) comment
		on board.no = comment.fNo
		where board.type = 'freeboard'
		
		<choose>
			<when test="searchType != null and searchType.equals('title')">
				AND board.title like CONCAT('%', #{searchText}, '%')
			</when>
			<when test="searchType != null and searchType.equals('content')">
				AND board.content like CONCAT('%', #{searchText}, '%')
			</when>
			<when test="searchType != null and searchType.equals('id')">
				AND board.id = #{searchText}
			</when>
			<when test="searchType != null and searchType.equals('all')">
				AND ( ( board.title like CONCAT('%', #{searchText}, '%') )
				OR ( board.content like CONCAT('%', #{searchText}, '%') )
				OR ( board.id = #{searchText} ) )
			</when>
		</choose>
		
		order by gNo desc, step asc limit #{startRow},#{pageSize}
	</select>
	
	<select id="getBoardCountById" resultType="int">
		select count(*) from board 
		where type='freeboard' AND id=#{id}
	</select>

	<select id="getCommentCountById" resultType="int">
		select count(*) from comment 
		where type='freeboard' AND id=#{id}
	</select>

</mapper>